version: '3.8'

services:
  db:
    image: postgres:14
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 15s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: flask_app
    environment:
      SECRET_KEY: ${SECRET_KEY}
      FLASK_ENV: ${FLASK_ENV}
      ADMIN_NAME: ${ADMIN_NAME}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      CCTV_IP: ${CCTV_IP}
      CCTV_USERNAME: ${CCTV_USERNAME}
      CCTV_PASSWORD: ${CCTV_PASSWORD}
      SMTP_MAIL_USERNAME: ${SMTP_MAIL_USERNAME}
      SMTP_MAIL_PASSWORD: ${SMTP_MAIL_PASSWORD}
      SMTP_MAIL_DEFAULT_SENDER: ${SMTP_MAIL_DEFAULT_SENDER}
      SMTP_MAIL_DEFAULT_RECIPIENT: ${SMTP_MAIL_DEFAULT_RECIPIENT}
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
    ports:
      - 5001:5001
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy 
    networks: 
      - app_network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
    container_name: next_app
    ports:
      - 3000:3000
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_SOCKET_IO_URL: ${NEXT_PUBLIC_SOCKET_IO_URL}
      NEXT_PUBLIC_URL: ${NEXT_PUBLIC_URL}
    networks:
      - app_network
    restart: unless-stopped
    
  nginx: 
    build:
      context: ./nginx
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./streams:/usr/share/nginx/html/streams
      - ./images:/app/images 
    networks:
      - app_network
    restart: unless-stopped

  redis:
    image: "redis:alpine"
    container_name: redis_container
    ports:
      - "6379:6379"
    networks:
      - app_network
    restart: always
    command: ["redis-server", "--bind", "0.0.0.0", "--protected-mode", "no"]
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-server --version || exit 1"] 
      interval: 5s
      retries: 10

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    container_name: celery_worker
    depends_on:
      redis:
        condition: service_healthy 
      backend:
        condition: service_started
    restart: always
    networks:
      - app_network
    environment:
      - FLASK_APP=app
    env_file:
      - .env
    volumes:
      - ./streams:/app/streams
      - ./images:/app/images 
    
networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
